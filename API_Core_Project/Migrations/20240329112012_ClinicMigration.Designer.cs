// <auto-generated />
using System;
using API_Core_Project.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_Core_Project.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20240329112012_ClinicMigration")]
    partial class ClinicMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API_Core_Project.Models.AppoinmentModel", b =>
                {
                    b.Property<int>("AppoinmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppoinmentId"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("timeSlot")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppoinmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appoinments");
                });

            modelBuilder.Entity("API_Core_Project.Models.BillModel", b =>
                {
                    b.Property<int>("BillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillID"));

                    b.Property<decimal>("ConsultingCharge")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("DateOfVisit")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<decimal>("InsuranceCoverage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCharge")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BillID");

                    b.HasIndex("PatientID");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("API_Core_Project.Models.DoctorImconeModel", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("DoctorIncomes");
                });

            modelBuilder.Entity("API_Core_Project.Models.DoctorModel", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("API_Core_Project.Models.PatientModel", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BloodType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Contact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateOnly>("DOB")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("API_Core_Project.Models.PrescriptionModel", b =>
                {
                    b.Property<int>("PriId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriId"));

                    b.Property<string>("Medicine")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("API_Core_Project.Models.ReportModel", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<int>("DId")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("DId");

                    b.HasIndex("PatientID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("API_Core_Project.Models.VisitModel", b =>
                {
                    b.Property<int>("VId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VId"));

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateofVisit")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int>("PriId")
                        .HasColumnType("int");

                    b.Property<int>("ReportID")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeSlot")
                        .HasColumnType("time");

                    b.HasKey("VId");

                    b.HasIndex("BillId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PId");

                    b.HasIndex("PriId");

                    b.HasIndex("ReportID");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("API_Core_Project.Models.AppoinmentModel", b =>
                {
                    b.HasOne("API_Core_Project.Models.PatientModel", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.PatientModel", null)
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Core_Project.Models.BillModel", b =>
                {
                    b.HasOne("API_Core_Project.Models.PatientModel", null)
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Core_Project.Models.DoctorImconeModel", b =>
                {
                    b.HasOne("API_Core_Project.Models.DoctorModel", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Core_Project.Models.ReportModel", b =>
                {
                    b.HasOne("API_Core_Project.Models.DoctorModel", null)
                        .WithMany()
                        .HasForeignKey("DId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.PatientModel", null)
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API_Core_Project.Models.VisitModel", b =>
                {
                    b.HasOne("API_Core_Project.Models.BillModel", null)
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.DoctorModel", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.PatientModel", null)
                        .WithMany()
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.PrescriptionModel", null)
                        .WithMany()
                        .HasForeignKey("PriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API_Core_Project.Models.ReportModel", null)
                        .WithMany()
                        .HasForeignKey("ReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
